

C:\Users\Oleg\spd-diplom\social_media\
|---.env
|---.gitignore
|---manage.py
|---media
|   `---posts
|---posts
|   |---admin.py
|   |---apps.py
|   |---models.py
|   |---serializers.py
|   |---tests.py
|   |---urls.py
|   |---views.py
|   |---__init__.py
|   |---migrations
|   |   |---0001_initial.py
|   |   |---__init__.py
|   |   `---__pycache__
|   |       |---0001_initial.cpython-312.pyc
|   |       `---__init__.cpython-312.pyc
|   |---static
|   |   `---posts
|   |       |---app.js
|   |       `---styles.css
|   
|---social_media
|   |---asgi.py
|   |---settings.py
|   |---urls.py
|   |---wsgi.py
|   |---__init__.py
|   `---__pycache__
|       
|---staticfiles
|   |---admin
|   |  
|   |   |---img
|   |   |  
|   |   `---js
|   |      
|   |---posts
|   |   |---app.js
|   |   `---styles.css
|   `---rest_framework
|      
`---templates
    `---posts
        `---index.html

# admin.py
from django.contrib import admin
from django.contrib.auth.models import User
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from .models import Post, PostImage, Comment, Like

class PostImageInline(admin.TabularInline):
    model = PostImage
    extra = 10

class PostInline(admin.TabularInline):
    model = Post
    extra = 0
    fields = ('text', 'created_at')
    readonly_fields = ('created_at',)
    inlines = [PostImageInline]

@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    list_display = ('id', 'author', 'text', 'likes_count', 'created_at')
    list_display_links = ('id', 'text')
    list_filter = ('author', 'created_at')
    search_fields = ('text', 'author__username')
    autocomplete_fields = ['author']
    readonly_fields = ('created_at', 'likes_count')
    inlines = [PostImageInline]
    fieldsets = (
        (None, {
            'fields': ('author', 'text')
        }),
        ('Дополнительно', {
            'fields': ('created_at', 'likes_count'),
            'classes': ('collapse',)
        }),
    )

    def likes_count(self, obj):
        return obj.likes.count()
    likes_count.short_description = 'Лайки'
    likes_count.admin_order_field = 'likes__count'


@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ('id', 'post', 'author', 'text', 'created_at')
    list_filter = ('author', 'created_at')
    search_fields = ('text', 'author__username')
    raw_id_fields = ('post', 'author')


@admin.register(Like)
class LikeAdmin(admin.ModelAdmin):
    list_display = ('id', 'post', 'user')
    list_filter = ('user',)
    raw_id_fields = ('post', 'user')
    date_hierarchy = 'post__created_at'


class UserAdmin(BaseUserAdmin):
    list_display = ('username', 'email', 'date_joined', 'post_count')
    inlines = [PostInline]

    def post_count(self, obj):
        return obj.posts.count()
    post_count.short_description = 'Количество постов'

admin.site.unregister(User)
admin.site.register(User, UserAdmin)


# models.py
from django.db import models
from django.contrib.auth.models import User
from django.core.validators import FileExtensionValidator
from django.db.models.signals import pre_delete
from django.dispatch import receiver
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _


def validate_image_size(value):
    filesize = value.size
    max_size = 5 * 1024 * 1024  # 5MB
    if filesize > max_size:
        raise ValidationError(_("Максимальный размер изображения 5MB"))


class Post(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='posts')
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.text[:50]


class PostImage(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='images')
    image = models.ImageField(
        upload_to='posts/',
        blank=True,
        null=True,
        validators=[
            validate_image_size,
            FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp'])
        ]
    )

    def __str__(self):
        return f"Image for post {self.post.id}"

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.text[:50]


class Like(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='likes')
    user = models.ForeignKey(User, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('post', 'user')

    def __str__(self):
        return f"{self.user.username} likes {self.post.id}"


@receiver(pre_delete, sender=PostImage)
def delete_post_image_files(sender, instance, **kwargs):
    """
    Удаляет файлы изображений при удалении объекта PostImage
    """
    if instance.image:
        instance.image.delete(save=False)

@receiver(pre_delete, sender=Post)
def delete_post_images(sender, instance, **kwargs):
    """
    Удаляет все связанные изображения при удалении поста
    """
    for image in instance.images.all():
        image.delete()



# serializers.py
import os
from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Post, PostImage, Comment, Like


class UserRegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(
        write_only=True,
        min_length=8,
        style={'input_type': 'password'},
        error_messages={
            'min_length': 'Пароль должен содержать не менее 8 символов, латинские буквы и цифры, спецсимволы.'
        }
    )
    email = serializers.EmailField(required=True)

    class Meta:
        model = User
        fields = ['username', 'email', 'password']
        extra_kwargs = {
            'username': {
                'min_length': 4,
                'error_messages': {
                    'min_length': 'Имя пользователя должно содержать не менее 4 символов, буквы или цифры, тире, подчеркивание, точка.'
                }
            }
        }

    def validate_email(self, value):
        if User.objects.filter(email=value).exists():
            raise serializers.ValidationError("Пользователь с таким email уже существует.")
        return value

    def create(self, validated_data):
        user = User.objects.create_user(
            username=validated_data['username'],
            email=validated_data['email'],
            password=validated_data['password']
        )
        return user


class PostImageSerializer(serializers.ModelSerializer):
    image = serializers.ImageField(required=False)

    class Meta:
        model = PostImage
        fields = ['id', 'image']
        read_only_fields = ['id']

    def validate_image(self, value):
        # Проверка размера
        if value.size > 5 * 1024 * 1024:  # 5MB
            raise serializers.ValidationError("Размер изображения не должен превышать 5MB.")

        # Проверка формата
        valid_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp']
        extension = os.path.splitext(value.name)[1].lower()
        if extension not in valid_extensions:
            raise serializers.ValidationError(
                "Неподдерживаемый формат изображения. Допустимые форматы: JPG, JPEG, PNG, GIF, WEBP"
            )

        return value


class CommentSerializer(serializers.ModelSerializer):
    author = serializers.ReadOnlyField(source='author.username')
    created_at = serializers.DateTimeField(format='%Y-%m-%d %H:%M:%S', read_only=True)

    class Meta:
        model = Comment
        fields = ['id', 'author', 'text', 'created_at']
        read_only_fields = ['id', 'created_at']

    def validate_text(self, value):
        if len(value.strip()) < 2:
            raise serializers.ValidationError("Комментарий должен содержать не менее 2 символов.")
        return value

    def validate(self, data):
        if self.context['request'].method == 'POST' and not self.context['request'].user.is_authenticated:
            raise serializers.ValidationError("Требуется авторизация")
        return data


class LikeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Like
        fields = ['user', 'post']
        read_only_fields = ['user']


class PostSerializer(serializers.ModelSerializer):
    author = serializers.ReadOnlyField(source='author.username')
    images = serializers.SerializerMethodField()
    comments = CommentSerializer(many=True, read_only=True)
    likes_count = serializers.SerializerMethodField()
    created_at = serializers.DateTimeField(format='%Y-%m-%d %H:%M:%S', read_only=True)
    can_edit = serializers.SerializerMethodField()

    class Meta:
        model = Post
        fields = ['id', 'author', 'text', 'images', 'created_at', 'comments', 'likes_count', 'can_edit']
        read_only_fields = ['id', 'created_at', 'likes_count']

    def get_likes_count(self, obj):
        return obj.likes.count()

    def get_can_edit(self, obj):
        request = self.context.get('request')
        return request and (request.user == obj.author or request.user.is_staff)

    def get_images(self, obj):
        request = self.context.get('request')
        images = obj.images.all()
        result = []

        for image in images:
            try:
                if image.image:  # Проверяем, есть ли изображение
                    url = image.image.url
                    if request:
                        url = request.build_absolute_uri(url)
                    result.append(url)
            except ValueError:
                # Если файл отсутствует, пропускаем его
                continue

        return result


    def validate_text(self, value):
        if len(value.strip()) < 5:
            raise serializers.ValidationError("Текст поста должен содержать не менее 5 символов.")
        return value

    def create(self, validated_data):
        post = Post.objects.create(**validated_data)
        images_data = self.context.get('view').request.FILES.getlist('images')
        if len(images_data) > 10:
            raise serializers.ValidationError("Необходимо загрузить не более 10 изображений.")
        for image_data in images_data:
            PostImage.objects.create(post=post, image=image_data)
        return post

    def update(self, instance, validated_data):
        # Обновляем текст
        instance.text = validated_data.get('text', instance.text)
        instance.save()

        # Обработка новых изображений
        if 'images' in self.context.get('request').FILES:
            for image in self.context.get('request').FILES.getlist('images'):
                PostImage.objects.create(post=instance, image=image)

        return instance


# posts/urls.py
from django.urls import path
from .views import (
    PostListCreateView,
    PostDetailView,
    CommentCreateView,
    LikeToggleView,
    index,
    RegisterView,
    DeleteImageView,
    DeleteCommentView,
)

urlpatterns = [
    path('', index, name='index'),
    path('posts/', PostListCreateView.as_view(), name='post-list-create'),
    path('posts/<int:pk>/', PostDetailView.as_view(), name='post-detail'),
    path('posts/<int:post_id>/comments/', CommentCreateView.as_view(), name='comment-create'),
    path('posts/<int:post_id>/like/', LikeToggleView.as_view(), name='like-toggle'),
    path('register/', RegisterView.as_view(), name='register'),
    path('posts/<int:pk>/delete_image/', DeleteImageView.as_view(), name='delete-image'),
    path('comments/<int:pk>/delete/', DeleteCommentView.as_view(), name='delete-comment'),
]


# views.py
from rest_framework import generics, permissions, status, serializers
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.exceptions import PermissionDenied, ValidationError
from django.core.exceptions import ValidationError as DjangoValidationError
from .models import Post, Comment, Like, PostImage
from django.shortcuts import render, get_object_or_404
from django.contrib.auth.models import User
from .serializers import PostSerializer, CommentSerializer, UserRegisterSerializer, LikeSerializer


def index(request):
    return render(request, 'posts/index.html')


class PostListCreateView(generics.ListCreateAPIView):
    queryset = Post.objects.all()
    serializer_class = PostSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def get_queryset(self):
        return Post.objects.all().order_by('-created_at')

    def perform_create(self, serializer):
        post = serializer.save(author=self.request.user)
        images = self.request.FILES.getlist('image')

        for image in images:
            try:
                PostImage.objects.create(post=post, image=image)
            except (ValidationError, DjangoValidationError) as e:
                post.delete()
                raise serializers.ValidationError(
                    {'images': str(e)}
                )


class PostDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Post.objects.all()
    serializer_class = PostSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def get_serializer_context(self):
        context = super().get_serializer_context()
        context['request'] = self.request
        return context

    def delete(self, request, *args, **kwargs):
        post = self.get_object()
        if post.author != request.user:
            return Response(
                {'error': 'You are not the owner of this post'},
                status=status.HTTP_403_FORBIDDEN
            )
        self.perform_destroy(post)
        return Response(
            {'message': 'Пост успешно удален'},  # Явное сообщение
            status=status.HTTP_200_OK            # Измененный статус
        )

    def put(self, request, *args, **kwargs):
        post = self.get_object()
        if post.author != request.user:
            return Response(
                {'error': 'You are not the owner of this post'},
                status=status.HTTP_403_FORBIDDEN
            )
        return super().put(request, *args, **kwargs)

    def perform_update(self, serializer):
        post = self.get_object()
        if post.author != self.request.user and not self.request.user.is_staff:
            raise PermissionDenied("Вы не можете редактировать этот пост")
        serializer.save()

    def perform_destroy(self, instance):
        if instance.author != self.request.user and not self.request.user.is_staff:
            raise PermissionDenied("Вы не можете удалить этот пост")
        instance.delete()


class CommentCreateView(generics.ListCreateAPIView):
    queryset = Comment.objects.all()
    serializer_class = CommentSerializer
    
    def get_permissions(self):
        if self.request.method == 'GET':
            return [permissions.AllowAny()]  # GET - доступно всем
        return [permissions.IsAuthenticated()]  # POST - только авторизованным

    def get_queryset(self):
        post_id = self.kwargs['post_id']
        return Comment.objects.filter(post_id=post_id).order_by('-created_at')

    def perform_create(self, serializer):
        post = get_object_or_404(Post, id=self.kwargs['post_id'])
        serializer.save(
            post=post,
            author=self.request.user  # Устанавливаем автора
        )


class LikeToggleView(generics.CreateAPIView):
    queryset = Like.objects.all()
    serializer_class = LikeSerializer
    permission_classes = [permissions.IsAuthenticated]

    def create(self, request, *args, **kwargs):
        post_id = self.kwargs['post_id']
        post = get_object_or_404(Post, id=post_id)
        user = request.user

        like, created = Like.objects.get_or_create(post=post, user=user)

        if not created:
            like.delete()
            return Response({'status': 'unliked'}, status=status.HTTP_200_OK)

        return Response({'status': 'liked'}, status=status.HTTP_201_CREATED)


class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserRegisterSerializer
    permission_classes = [permissions.AllowAny]


class DeleteImageView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, pk):
        post = get_object_or_404(Post, id=pk)
        if post.author != request.user and not request.user.is_staff:
            return Response(
                {'error': 'You are not the owner of this post'},
                status=status.HTTP_403_FORBIDDEN
            )

        image_name = request.data.get('image_name')
        if not image_name:
            return Response(
                {'error': 'Image name is required'},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            image = post.images.get(image__endswith=image_name)
            try:
                image.image.delete(save=False)
                image.delete()
                return Response({'status': 'image deleted'}, status=status.HTTP_200_OK)
            except Exception as e:
                return Response(
                    {'error': f'Error deleting image file: {str(e)}'},
                    status=status.HTTP_500_INTERNAL_SERVER_ERROR
                )
        except PostImage.DoesNotExist:
            return Response(
                {'error': 'Image not found'},
                status=status.HTTP_404_NOT_FOUND
            )


class DeleteCommentView(generics.DestroyAPIView):
    queryset = Comment.objects.all()
    permission_classes = [permissions.IsAuthenticated]

    def delete(self, request, *args, **kwargs):
        comment = self.get_object()
        post = comment.post
        if post.author != request.user and not request.user.is_staff:
            return Response(
                {'error': 'У вас нет прав на удаление этого комментария'},
                status=status.HTTP_403_FORBIDDEN
            )
        comment.delete()
        return Response({'message': 'Комментарий успешно удален'}, status=status.HTTP_200_OK)

        
# settings.py
"""
Django settings for social_media project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=lambda v: [s.strip() for s in v.split(',')])

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'posts',
    'corsheaders',
    'rest_framework_simplejwt',
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'social_media.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'social_media.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DATABASE_NAME'),
        'USER': config('DATABASE_USER'),
        'PASSWORD': config('DATABASE_PASSWORD'),
        'HOST': config('DATABASE_HOST', default='localhost'),
        'PORT': config('DATABASE_PORT', default='5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'posts/static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOWED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}


# social_media/urls.py
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('posts.urls')),
    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('', include('posts.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


# index.html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Социальная сеть</title>
    {% load static %}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"  rel="stylesheet">
    <link rel="stylesheet" href="{% static 'posts/styles.css' %}">
    <link rel="stylesheet" href="https://unpkg.com/swiper@8/swiper-bundle.min.css">
</head>
<body>
    <div id="app" class="container">
        <h1>Социальная сеть</h1>
        <!-- Блок информации о пользователе -->
        <div id="user-info" class="hidden">
            Вы вошли как: <span id="username-display"></span>
            <button id="logout-btn">Выйти</button>
        </div>
        <!-- Формы авторизации -->
        <div id="auth-forms">
            <form id="login-form" class="hidden">
                <h2>Вход</h2>
                <input type="text" id="login-username" placeholder="Имя пользователя" required>
                <input type="password" id="login-password" placeholder="Пароль" required>
                <button type="submit">Подтвердить вход</button>
            </form>
            <form id="register-form" class="hidden">
                <h2>Регистрация</h2>
                <p> 
                    Имя пользователя должно содержать не менее 4 символов, любые буквы или цифры, тире, подчеркивание, точка.
                </p> 
                <p class="small-para"> 
                    Пароль должен содержать не менее 8 символов, латинские буквы и цифры, спецсимволы.
                </p> 
                <input type="text" id="register-username" placeholder="Имя пользователя" required>
                <input type="email" id="register-email" placeholder="Email" required>
                <input type="password" id="register-password" placeholder="Пароль" required>
                <button type="submit">Подтвердить регистрацию</button>
            </form>
            <div id="auth-buttons">
                <button id="show-login">Войти</button>
                <button id="show-register">Зарегистрироваться</button>
            </div>
        </div>
        <!-- Форма создания поста -->
        <form id="new-post-form" class="hidden">
            <h2>Новый пост</h2>
            <textarea id="new-post-text" placeholder="Введите текст поста не менее 5 символов" required></textarea>
            <input type="file" id="new-post-images" accept="image/*" multiple>
            <button type="submit">Опубликовать</button>
        </form>
        <!-- Список постов -->
        <div id="posts"></div>
    </div>
    <script src="https://unpkg.com/swiper@8/swiper-bundle.min.js"></script>
    <script src="{% static 'posts/app.js' %}"></script>
</body>
</html>


# styles.css
/* ==================== */
/* Базовые стили */
/* ==================== */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
}

/* Основной контейнер приложения */
.container {
    max-width: 800px;
    margin: 20px auto;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    position: relative;
}

/* Заголовки */
h1, h2, h3, h4 {
    color: #333;
}

h1 {
    text-align: center;
}

/* ==================== */
/* Формы и элементы ввода */
/* ==================== */
form {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 20px;
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    position: relative;
}

input[type="text"],
input[type="password"],
input[type="email"],
textarea {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

button {
    padding: 8px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    width: auto;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #0056b3;
}

button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

/* ==================== */
/* Индикаторы загрузки и ошибки */
/* ==================== */
.loading-indicator {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.8);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    border-radius: 5px;
}

.spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    border-top: 4px solid #007bff;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin-bottom: 10px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.error-message {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px;
    background: #ff4444;
    color: white;
    border-radius: 5px;
    z-index: 10000;
    max-width: 300px;
    animation: fadeIn 0.3s;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
}

.no-posts {
    text-align: center;
    padding: 20px;
    color: #666;
}

/* ==================== */
/* Стили для изображений */
/* ==================== */
.post-image {
    max-width: 100%;
    height: auto;
    display: block;
    transition: opacity 0.3s;
}

.image-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 14px;
    z-index: 10;
    display: none;
}

.swiper-slide {
    position: relative;
}

/* ==================== */
/* Блок авторизации */
/* ==================== */
#auth-forms {
    margin-bottom: 20px;
}

#auth-buttons button {
    margin-right: 10px;
    width: auto;
}

#user-info {
    margin: 10px 0;
    padding: 10px;
    background: #f0f0f0;
    border-radius: 5px;
}

#logout-btn {
    margin-left: 10px;
    background: #ff4444;
    color: white;
    padding: 5px 10px;
    width: auto;
}

/* ==================== */
/* Посты и комментарии */
/* ==================== */
.post {
    border-bottom: 1px solid #ccc;
    padding: 10px 0;
    position: relative;
}

.post-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.post-actions {
    display: flex;
    gap: 10px;
}

.post-actions button {
    background: none;
    border: none;
    font-size: 1.5em;
    padding: 5px;
    width: auto;
    color: #333;
}

.post-actions button:hover {
    color: #007bff;
    background: none;
}

.comment {
    margin-left: 20px;
    padding: 10px 0;
    border-top: 1px solid #eee;
}

.comment-form {
    margin-top: 10px;
}

.comment-form input[type="text"] {
    width: calc(100% - 22px);
}

/* ==================== */
/* Модальные окна */
/* ==================== */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 5px;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
}

.current-images {
    margin: 15px 0;
}

.image-container {
    margin-bottom: 10px;
    border: 1px solid #ddd;
    padding: 10px;
    border-radius: 4px;
}

.image-container img {
    max-width: 100%;
    height: auto;
    display: block;
    margin-bottom: 5px;
}

.delete-image-btn {
    background: #ff4444;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 3px;
    cursor: pointer;
}

.modal-buttons {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}

.modal-buttons button {
    flex: 1;
}

/* ==================== */
/* Карусель Swiper */
/* ==================== */
.swiper {
    width: 100%;
    height: 400px;
    max-height: 70vh;
    margin: 20px 0;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.swiper-slide {
    display: flex;
    justify-content: center;
    align-items: center;
    background: #000;
    position: relative;
}

.swiper-slide img {
    max-height: 100%;
    max-width: 100%;
    object-fit: contain;
    border-radius: 8px;
    transition: transform 0.3s ease;
}

.swiper-slide img:hover {
    transform: scale(1.03);
}

.swiper-pagination-bullet {
    width: 12px;
    height: 12px;
    background: #fff;
    opacity: 0.6;
}

.swiper-pagination-bullet-active {
    background: #007aff;
    opacity: 1;
}

.swiper-button-next,
.swiper-button-prev {
    color: #fff;
    background: rgba(0,0,0,0.5);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.swiper-button-next:hover,
.swiper-button-prev:hover {
    background: rgba(0,0,0,0.8);
}

/* ==================== */
/* Утилиты */
/* ==================== */
.hidden { 
    display: none; 
}

/* ==================== */
/* Стили пагинации */
/* ==================== */
.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px 0;
    gap: 10px;
}

.pagination button {
    padding: 8px 16px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.pagination button:hover {
    background-color: #0056b3;
}

.pagination button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.pagination span {
    font-size: 16px;
    color: #333;
}

/* ==================== */
/* Адаптивность */
/* ==================== */
@media (max-width: 768px) {
    .container {
        padding: 10px;
    }
    
    .swiper {
        height: 300px;
    }
    
    .swiper-button-next,
    .swiper-button-prev {
        display: none;
    }
    
    .error-message {
        max-width: 90%;
        left: 5%;
        right: 5%;
    }
}


# app.js
document.addEventListener('DOMContentLoaded', () => {
    // Конфигурация
    const API_BASE_URL = 'http://127.0.0.1:8000/api';
    const MEDIA_URL = 'http://127.0.0.1:8000/media';
    const DEFAULT_IMAGE = 'https://via.placeholder.com/400x300?text=Image+Not+Available';

    // Элементы DOM
    const elements = {
        newPostForm: document.getElementById('new-post-form'),
        newPostText: document.getElementById('new-post-text'),
        newPostImages: document.getElementById('new-post-images'),
        postsContainer: document.getElementById('posts'),
        loginForm: document.getElementById('login-form'),
        registerForm: document.getElementById('register-form'),
        logoutBtn: document.getElementById('logout-btn'),
        userInfo: document.getElementById('user-info'),
        usernameDisplay: document.getElementById('username-display'),
        authForms: document.getElementById('auth-forms'),
        showLoginBtn: document.getElementById('show-login'),
        showRegisterBtn: document.getElementById('show-register'),
        authButtons: document.getElementById('auth-buttons')
    };

    // Инициализированные Swiper-карусели
    const swiperInstances = [];

    // Функция для показа индикатора загрузки
    const showLoading = (element, text = 'Загрузка...') => {
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'loading-indicator';
        loadingDiv.innerHTML = `
            <div class="spinner"></div>
            <span>${text}</span>
        `;
        element.style.position = 'relative';
        element.appendChild(loadingDiv);
        return loadingDiv;
    };

    // Функция для скрытия индикатора загрузки
    const hideLoading = (element) => {
        const loader = element.querySelector('.loading-indicator');
        if (loader) {
            loader.remove();
        }
    };

    // Проверка авторизации
    const checkAuth = async () => {
        const token = localStorage.getItem('access_token');
        return !!token;
    };

    // Обновление UI
    const updateUI = async () => {
        const isAuth = await checkAuth();
        elements.authForms.classList.toggle('hidden', isAuth);
        elements.newPostForm.classList.toggle('hidden', !isAuth);
        elements.userInfo.classList.toggle('hidden', !isAuth);
        if (isAuth) {
            const username = localStorage.getItem('username');
            if (username) elements.usernameDisplay.textContent = username;
        }
        await fetchPosts();
    };

    // Загрузка постов
    let currentPage = 1;

    const fetchPosts = async (page = 1) => {
        const loadingIndicator = showLoading(elements.postsContainer, 'Загрузка постов...');
        try {
            const headers = {};
            const token = localStorage.getItem('access_token');
            if (token) {
                headers['Authorization'] = `Bearer ${token}`;
            }

            const response = await fetch(`${API_BASE_URL}/posts/?page=${page}`, { headers });
            if (!response.ok) {
                throw new Error('Ошибка загрузки постов');
            }

            const data = await response.json();
            renderPosts(data.results || data);
            renderPagination(data);
        } catch (error) {
            console.error('Error:', error);
            showError('Ошибка загрузки постов: ' + error.message);
        } finally {
            hideLoading(elements.postsContainer);
        }
    };

    // Отображение пагинации
    const renderPagination = (data) => {
        if (!data.next && !data.previous) return;

        const paginationDiv = document.createElement('div');
        paginationDiv.className = 'pagination';

        if (data.previous) {
            const prevBtn = document.createElement('button');
            prevBtn.textContent = '← Назад';
            prevBtn.addEventListener('click', () => {
                currentPage--;
                fetchPosts(currentPage);
            });
            paginationDiv.appendChild(prevBtn);
        }

        const pageInfo = document.createElement('span');
        pageInfo.textContent = ` Страница ${currentPage} `;
        paginationDiv.appendChild(pageInfo);

        if (data.next) {
            const nextBtn = document.createElement('button');
            nextBtn.textContent = 'Вперед →';
            nextBtn.addEventListener('click', () => {
                currentPage++;
                fetchPosts(currentPage);
            });
            paginationDiv.appendChild(nextBtn);
        }

        elements.postsContainer.appendChild(paginationDiv);
    };

    // Показать ошибку
    const showError = (message) => {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = message;
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 5000);
    };

    // Отрисовка постов
    const renderPosts = (posts) => {
        // Уничтожаем старые карусели
        swiperInstances.forEach(swiper => swiper.destroy());
        swiperInstances.length = 0;

        if (!posts || posts.length === 0) {
            elements.postsContainer.innerHTML = '<p class="no-posts">Пока нет постов</p>';
            return;
        }

        elements.postsContainer.innerHTML = posts.map(post => `
            <div class="post" data-id="${post.id}">
                <div class="post-header">
                    <h3>${post.author}</h3>
                    ${post.can_edit ? `
                        <div class="post-actions">
                            <button class="edit-post-btn" data-id="${post.id}">✏️</button>
                            <button class="delete-post-btn" data-id="${post.id}">🗑️</button>
                        </div>
                    ` : ''}
                </div>
                <p class="post-text">${post.text}</p>
                ${post.images && post.images.length ? `
                    <div class="swiper post-images">
                        <div class="swiper-wrapper">
                            ${post.images.map(img => `
                                <div class="swiper-slide">
                                    <img src="${img}" 
                                        loading="lazy" 
                                        alt="Изображение поста ${post.author}"
                                        onerror="this.src='${DEFAULT_IMAGE}';this.onerror=null;"
                                        class="post-image">
                                </div>
                            `).join('')}
                        </div>
                        <div class="swiper-pagination"></div>
                        <div class="swiper-button-prev"></div>
                        <div class="swiper-button-next"></div>
                    </div>
                ` : ''}
                <p class="post-date">${new Date(post.created_at).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}</p>
                <button class="like-btn" data-id="${post.id}" ${!localStorage.getItem('access_token') ? 'disabled' : ''}>
                    ❤️ ${post.likes_count} ${post.likes_count === 1 ? 'лайк' : 'лайков'}
                </button>
                <div class="comments">
                    <h5>Комментарии (${post.comments ? post.comments.length : 0})</h5>
                    ${(post.comments || []).map(comment => `
                        <div class="comment">
                            <strong>${comment.author}:</strong> ${comment.text}
                            <small>${new Date(comment.created_at).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}</small>
                            ${localStorage.getItem('access_token') ? (
                                post.can_edit ? `
                                    <button class="btn btn-link text-danger ms-auto delete-comment-btn" data-id="${comment.id}">❌ Удалить</button>
                                ` : ''
                            ) : ''}
                        </div>
                    `).join('')}
                    ${localStorage.getItem('access_token') ? `
                        <form class="comment-form" data-id="${post.id}">
                            <input type="text" placeholder="Ваш комментарий" required>
                            <button type="submit">Отправить</button>
                        </form>
                    ` : '<p>Зарегистрируйтесь и войдите, чтобы оставить комментарий или поставить лайк</p>'}
                </div>
            </div>
        `).join('');

        // Инициализация каруселей
        document.querySelectorAll('.swiper').forEach(swiperEl => {
            const swiper = new Swiper(swiperEl, {
                loop: true,
                pagination: {
                    el: '.swiper-pagination',
                    clickable: true,
                },
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev',
                },
                autoplay: {
                    delay: 5000,
                    disableOnInteraction: false,
                },
                effect: 'slide',
                grabCursor: true,
                centeredSlides: true,
                slidesPerView: 'auto',
                spaceBetween: 10,
            });
            swiperInstances.push(swiper);
        });

        // Назначение обработчиков событий
        document.querySelectorAll('.like-btn').forEach(btn => {
            btn.addEventListener('click', () => handleLike(btn.dataset.id));
        });

        document.querySelectorAll('.comment-form').forEach(form => {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                const input = form.querySelector('input');
                handleComment(form.dataset.id, input.value);
                input.value = '';
            });
        });

        document.querySelectorAll('.edit-post-btn').forEach(btn => {
            btn.addEventListener('click', () => showEditForm(btn.dataset.id));
        });

        document.querySelectorAll('.delete-comment-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const commentId = btn.dataset.id;
                const postId = btn.closest('.post').dataset.id;
                if (!confirm('Вы уверены, что хотите удалить этот комментарий?')) return;
                try {
                    const token = localStorage.getItem('access_token');
                    if (!token) throw new Error('Требуется авторизация');
                    const response = await fetch(`${API_BASE_URL}/comments/${commentId}/delete/`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.detail || 'Ошибка удаления комментария');
                    }
                    alert('Комментарий успешно удален');
                    await fetchPosts(); // Обновляем список постов
                } catch (error) {
                    console.error('Error:', error);
                    showError(error.message);
                }
            });
        });

        document.querySelectorAll('.delete-post-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const postId = btn.dataset.id;
                if (!confirm('Вы уверены, что хотите удалить этот пост?')) return;
                
                try {
                    const token = localStorage.getItem('access_token');
                    if (!token) throw new Error('Требуется авторизация');
                    
                    const response = await fetch(`${API_BASE_URL}/posts/${postId}/`, {
                        method: 'DELETE',
                        headers: { 
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });
        
                    const result = await response.json(); // Читаем JSON-ответ
                    
                    if (!response.ok) {
                        throw new Error(result.detail || 'Ошибка удаления поста');
                    }
        
                    showError(result.message || 'Пост успешно удален'); // Показываем сообщение
                    await fetchPosts(); // Обновляем список
                } catch (error) {
                    console.error('Error:', error);
                    showError(error.message);
                }
            });
        });
    };

    // Создание поста с индикатором загрузки
    const handleNewPost = async (e) => {
        e.preventDefault();
        const text = elements.newPostText.value.trim();
        const images = elements.newPostImages.files;

        if (!text) return showError('Введите текст поста не менее 5 символов');
        if (images.length > 10) return showError('Не более 10 изображений');

        const formData = new FormData();
        formData.append('text', text);
        Array.from(images).forEach(img => formData.append('images', img));

        const loadingIndicator = showLoading(elements.newPostForm, 'Публикация поста...');
        try {
            const token = localStorage.getItem('access_token');
            if (!token) throw new Error('Требуется авторизация');
            const response = await fetch(`${API_BASE_URL}/posts/`, {
                method: 'POST',
                headers: { 'Authorization': `Bearer ${token}` },
                body: formData
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || 'Ошибка создания поста');
            }
            elements.newPostText.value = '';
            elements.newPostImages.value = '';
            await fetchPosts();
        } catch (error) {
            console.error('Error:', error);
            showError(error.message);
        } finally {
            hideLoading(elements.newPostForm);
        }
    };

    // Показать форму редактирования
    const showEditForm = async (postId) => {
        try {
            const token = localStorage.getItem('access_token');
            if (!token) throw new Error('Требуется авторизация');
            const response = await fetch(`${API_BASE_URL}/posts/${postId}/`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (!response.ok) throw new Error('Ошибка загрузки поста');
            const post = await response.json();

            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <h2>Редактировать пост</h2>
                    <form id="edit-post-form">
                        <textarea id="edit-post-text" required>${post.text}</textarea>
                        <div class="current-images">
                            <h4>Текущие изображения:</h4>
                            ${post.images && post.images.length ? 
                                post.images.map(img => `
                                    <div class="image-container">
                                        <img src="${img}" alt="Post image">
                                        <button type="button" class="delete-image-btn" data-url="${img}">Удалить</button>
                                    </div>
                                `).join('') : 
                                '<p>Нет изображений</p>'
                            }
                        </div>
                        <label for="edit-post-images">Добавить новые изображения:</label>
                        <input type="file" id="edit-post-images" accept="image/*" multiple>
                        <div class="modal-buttons">
                            <button type="submit">Сохранить</button>
                            <button type="button" class="cancel-edit">Отмена</button>
                        </div>
                    </form>
                </div>
            `;
            document.body.appendChild(modal);

            modal.querySelector('.cancel-edit').addEventListener('click', () => modal.remove());

            modal.querySelector('#edit-post-form').addEventListener('submit', async (e) => { 
                e.preventDefault();
                const loadingIndicator = showLoading(modal.querySelector('.modal-content'), 'Сохранение...');
                try {
                    await handleEditPost(postId, modal);
                } catch (error) {
                    showError(error.message);
                } finally {
                    hideLoading(modal.querySelector('.modal-content'));
                }
            });

            modal.querySelectorAll('.delete-image-btn').forEach(btn => {
                btn.addEventListener('click', () => handleDeleteImage(postId, btn.dataset.url, modal));
            });
        } catch (error) {
            console.error('Error:', error);
            showError(error.message);
        }
    };

    // Редактирование поста
    const handleEditPost = async (postId, modal) => {
        const text = modal.querySelector('#edit-post-text').value.trim();
        const images = modal.querySelector('#edit-post-images').files;

        if (!text) throw new Error('Введите текст поста не менее 5 символов');

        const formData = new FormData();
        formData.append('text', text);
        Array.from(images).forEach(img => formData.append('images', img));

        try {
            const token = localStorage.getItem('access_token');
            const response = await fetch(`${API_BASE_URL}/posts/${postId}/`, {
                method: 'PUT',
                headers: { 'Authorization': `Bearer ${token}` },
                body: formData
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || 'Ошибка редактирования поста');
            }
            modal.remove();
            await fetchPosts();
        } catch (error) {
            throw error;
        }
    };

    // Удаление изображения
    const handleDeleteImage = async (postId, imageUrl, modal) => {
        if (!confirm('Вы уверены, что хотите удалить это изображение?')) return;
        try {
            const token = localStorage.getItem('access_token');
            const imageName = imageUrl.split('/').pop();
            const response = await fetch(`${API_BASE_URL}/posts/${postId}/delete_image/`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ image_name: imageName })
            });
            if (!response.ok) throw new Error('Ошибка удаления изображения');
            modal.remove();
            await showEditForm(postId);
        } catch (error) {
            console.error('Error:', error);
            showError(error.message);
        }
    };

    // Лайк поста
    const handleLike = async (postId) => {
        try {
            const token = localStorage.getItem('access_token');
            if (!token) throw new Error('Требуется авторизация');
            const response = await fetch(`${API_BASE_URL}/posts/${postId}/like/`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            if (!response.ok) throw new Error('Ошибка лайка');
            await fetchPosts();
        } catch (error) {
            console.error('Error:', error);
            showError(error.message);
        }
    };

    // Добавление комментария
    const handleComment = async (postId, text) => {
        if (!text.trim()) return showError('Введите комментарий');
        try {
            const token = localStorage.getItem('access_token');
            if (!token) throw new Error('Требуется авторизация');
            const response = await fetch(`${API_BASE_URL}/posts/${postId}/comments/`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ text })
            });
            if (!response.ok) throw new Error('Ошибка комментария');
            await fetchPosts();
        } catch (error) {
            console.error('Error:', error);
            showError(error.message);
        }
    };

    // Авторизация
    const handleLogin = async (e) => {
        e.preventDefault();
        const username = document.getElementById('login-username').value;
        const password = document.getElementById('login-password').value;
        const loadingIndicator = showLoading(elements.loginForm, 'Вход...');
        try {
            const response = await fetch(`${API_BASE_URL}/token/`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password })
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || 'Ошибка авторизации');
            }
            const { access, refresh } = await response.json();
            localStorage.setItem('access_token', access);
            localStorage.setItem('refresh_token', refresh);
            localStorage.setItem('username', username);
            elements.loginForm.classList.add('hidden');
            elements.registerForm.classList.add('hidden');
            await updateUI();
        } catch (error) {
            console.error('Error:', error);
            showError(error.message);
        } finally {
            hideLoading(elements.loginForm);
        }
    };

    // Регистрация
    const handleRegister = async (e) => {
        e.preventDefault();
        const username = document.getElementById('register-username').value;
        const email = document.getElementById('register-email').value;
        const password = document.getElementById('register-password').value;
        const loadingIndicator = showLoading(elements.registerForm, 'Регистрация...');
        try {
            const response = await fetch(`${API_BASE_URL}/register/`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, email, password })
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(Object.values(errorData).join(', '));
            }
            showError('Регистрация успешна! Войдите в систему.');
            elements.loginForm.classList.remove('hidden');
            elements.registerForm.classList.add('hidden');
        } catch (error) {
            console.error('Error:', error);
            showError(error.message);
        } finally {
            hideLoading(elements.registerForm);
        }
    };

    // Выход из системы
    const handleLogout = () => {
        localStorage.removeItem('access_token');
        localStorage.removeItem('refresh_token');
        localStorage.removeItem('username');
        updateUI();
    };

    // Инициализация
    const init = () => {
        elements.newPostForm.addEventListener('submit', handleNewPost);
        elements.loginForm.addEventListener('submit', handleLogin);
        elements.registerForm.addEventListener('submit', handleRegister);
        elements.logoutBtn.addEventListener('click', handleLogout);
        elements.showLoginBtn.addEventListener('click', () => {
            elements.loginForm.classList.remove('hidden');
            elements.registerForm.classList.add('hidden');
        });
        elements.showRegisterBtn.addEventListener('click', () => {
            elements.registerForm.classList.remove('hidden');
            elements.loginForm.classList.add('hidden');
        });
        updateUI();
    };
    init();
});